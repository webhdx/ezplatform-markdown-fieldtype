/*
 * Copyright (C) eZ Systems AS. All rights reserved.
 * For full copyright and license information view LICENSE file distributed with this source code.
 */
YUI.add('md-markdown-editview', function (Y) {
    'use strict';

    /**
     * Provides the field edit view for the Markdown (ezmarkdown) fields
     *
     * @module md-markdown-editview
     */
    Y.namespace('md');

    const FIELDTYPE_IDENTIFIER = 'ezmarkdown',
        SELECTOR_TEXTAREA = '.md-markdown__input',
        SELECTOR_PREVIEW = '.md-markdown__preview',
        EVENTS = {};

    EVENTS[SELECTOR_TEXTAREA] = {
        blur: '_renderPreview',
        valuechange: '_renderPreview'
    };

    /**
     * Markdown Text Block edit view
     *
     * @namespace md
     * @class MarkdownEditView
     * @constructor
     * @extends eZ.FieldEditView
     */
    Y.md.MarkdownEditView = Y.Base.create('mdMarkdownEditView', Y.eZ.FieldEditView, [], {
        events: EVENTS,

        render: function () {
            this.constructor.superclass.render.apply(this, arguments);

            this._renderPreview();

            return this;
        },

        /**
         * Renders Markdown preview
         *
         * @method _renderPreview
         * @protected
         */
        _renderPreview: function () {
            this._getPreviewNode().setHTML(this.get('markdownConverter').makeHtml(this._getFieldValue()));
        },

        /**
         * Defines the variables to imported in the field edit template for text
         * block.
         *
         * @method _variables
         * @protected
         * @return {Object} containing isRequired entry
         */
        _variables: function () {
            return {
                isRequired: this.get('fieldDefinition').isRequired
            };
        },

        /**
         * Returns the input validity state object for the input generated by
         * the text block template
         *
         * See https://developer.mozilla.org/en-US/docs/Web/API/ValidityState
         *
         * @method _getInputValidity
         * @protected
         * @return {ValidityState}
         */
        _getInputValidity: function () {
            return this._getInputNode().get('validity');
        },

        /**
         * Returns the currently filled value of the text block field
         *
         * @method _getFieldValue
         * @protected
         * @return {String}
         */
        _getFieldValue: function () {
            return this._getInputNode().get('value');
        },

        /**
         * Returns the textarea input node
         *
         * @method _getInputNode
         * @protected
         * @return {Y.Node}
         */
        _getInputNode: function () {
            return this.get('container').one(SELECTOR_TEXTAREA);
        },

        /**
         * Returns the preview node
         *
         * @method _getPreviewNode
         * @protected
         * @return {Y.Node}
         */
        _getPreviewNode: function () {
            return this.get('container').one(SELECTOR_PREVIEW);
        }
    }, {
        ATTRS: {
            /**
             * Markdown converter
             *
             * @attribute markdownConverter
             * @type Y.md.Markdown
             * @readOnly
             */
            markdownConverter: {
                valueFn: () => new Y.md.Markdown.Converter(),
                readOnly: true
            }
        }
    });

    Y.eZ.FieldEditView.registerFieldEditView(FIELDTYPE_IDENTIFIER, Y.md.MarkdownEditView);
});
